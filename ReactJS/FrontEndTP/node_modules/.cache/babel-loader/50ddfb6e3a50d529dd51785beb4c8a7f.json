{"ast":null,"code":"import { useState, useCallback, useRef, useEffect } from 'react';\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n  const activeHttpRequests = useRef([]);\n  const sendRequest = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n    setIsLoading(true);\n    const httpAbortCtrl = new AbortController();\n    activeHttpRequests.current.push(httpAbortCtrl);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers,\n        signal: httpAbortCtrl.signal\n      });\n      const responseData = await response.json();\n      activeHttpRequests.current = activeHttpRequests.current.filter(reqCtrl => reqCtrl !== httpAbortCtrl);\n\n      if (!response.ok) {\n        throw new Error(responseData.message);\n      }\n\n      setIsLoading(false);\n      return responseData;\n    } catch (err) {\n      setError(err.message);\n      setIsLoading(false);\n      throw err;\n    }\n  }, []);\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\n    };\n  }, []);\n  return {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  };\n};","map":{"version":3,"sources":["C:/ReactJS/file-upload-08-place-image-deletion/frontend/src/shared/hooks/http-hook.js"],"names":["useState","useCallback","useRef","useEffect","useHttpClient","isLoading","setIsLoading","error","setError","activeHttpRequests","sendRequest","url","method","body","headers","httpAbortCtrl","AbortController","current","push","response","fetch","signal","responseData","json","filter","reqCtrl","ok","Error","message","err","clearError","forEach","abortCtrl","abort"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,MAAhC,EAAwCC,SAAxC,QAAyD,OAAzD;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,EAAlC;AAEA,QAAMS,kBAAkB,GAAGP,MAAM,CAAC,EAAD,CAAjC;AAEA,QAAMQ,WAAW,GAAGT,WAAW,CAC7B,OAAOU,GAAP,EAAYC,MAAM,GAAG,KAArB,EAA4BC,IAAI,GAAG,IAAnC,EAAyCC,OAAO,GAAG,EAAnD,KAA0D;AACxDR,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMS,aAAa,GAAG,IAAIC,eAAJ,EAAtB;AACAP,IAAAA,kBAAkB,CAACQ,OAAnB,CAA2BC,IAA3B,CAAgCH,aAAhC;;AAEA,QAAI;AACF,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAD,EAAM;AAChCC,QAAAA,MADgC;AAEhCC,QAAAA,IAFgC;AAGhCC,QAAAA,OAHgC;AAIhCO,QAAAA,MAAM,EAAEN,aAAa,CAACM;AAJU,OAAN,CAA5B;AAOA,YAAMC,YAAY,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAA3B;AAEAd,MAAAA,kBAAkB,CAACQ,OAAnB,GAA6BR,kBAAkB,CAACQ,OAAnB,CAA2BO,MAA3B,CAC3BC,OAAO,IAAIA,OAAO,KAAKV,aADI,CAA7B;;AAIA,UAAI,CAACI,QAAQ,CAACO,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAUL,YAAY,CAACM,OAAvB,CAAN;AACD;;AAEDtB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,aAAOgB,YAAP;AACD,KApBD,CAoBE,OAAOO,GAAP,EAAY;AACZrB,MAAAA,QAAQ,CAACqB,GAAG,CAACD,OAAL,CAAR;AACAtB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,YAAMuB,GAAN;AACD;AACF,GA/B4B,EAgC7B,EAhC6B,CAA/B;;AAmCA,QAAMC,UAAU,GAAG,MAAM;AACvBtB,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,GAFD;;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACX;AACAM,MAAAA,kBAAkB,CAACQ,OAAnB,CAA2Bc,OAA3B,CAAmCC,SAAS,IAAIA,SAAS,CAACC,KAAV,EAAhD;AACD,KAHD;AAID,GALQ,EAKN,EALM,CAAT;AAOA,SAAO;AAAE5B,IAAAA,SAAF;AAAaE,IAAAA,KAAb;AAAoBG,IAAAA,WAApB;AAAiCoB,IAAAA;AAAjC,GAAP;AACD,CArDM","sourcesContent":["import { useState, useCallback, useRef, useEffect } from 'react';\n\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  const activeHttpRequests = useRef([]);\n\n  const sendRequest = useCallback(\n    async (url, method = 'GET', body = null, headers = {}) => {\n      setIsLoading(true);\n      const httpAbortCtrl = new AbortController();\n      activeHttpRequests.current.push(httpAbortCtrl);\n\n      try {\n        const response = await fetch(url, {\n          method,\n          body,\n          headers,\n          signal: httpAbortCtrl.signal\n        });\n\n        const responseData = await response.json();\n\n        activeHttpRequests.current = activeHttpRequests.current.filter(\n          reqCtrl => reqCtrl !== httpAbortCtrl\n        );\n\n        if (!response.ok) {\n          throw new Error(responseData.message);\n        }\n\n        setIsLoading(false);\n        return responseData;\n      } catch (err) {\n        setError(err.message);\n        setIsLoading(false);\n        throw err;\n      }\n    },\n    []\n  );\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\n    };\n  }, []);\n\n  return { isLoading, error, sendRequest, clearError };\n};\n"]},"metadata":{},"sourceType":"module"}