{"ast":null,"code":"const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\nexport const VALIDATOR_REQUIRE = () => ({\n  type: VALIDATOR_TYPE_REQUIRE\n});\nexport const VALIDATOR_FILE = () => ({\n  type: VALIDATOR_TYPE_FILE\n});\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({\n  type: VALIDATOR_TYPE_MIN,\n  val: val\n});\nexport const VALIDATOR_MAX = val => ({\n  type: VALIDATOR_TYPE_MAX,\n  val: val\n});\nexport const VALIDATOR_EMAIL = () => ({\n  type: VALIDATOR_TYPE_EMAIL\n});\nexport const validate = (value, validators) => {\n  let isValid = true;\n\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n\n  return isValid;\n};","map":{"version":3,"sources":["C:/ReactJS/file-upload-08-place-image-deletion/frontend/src/shared/util/validators.js"],"names":["VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_MIN","VALIDATOR_TYPE_MAX","VALIDATOR_TYPE_EMAIL","VALIDATOR_TYPE_FILE","VALIDATOR_REQUIRE","type","VALIDATOR_FILE","VALIDATOR_MINLENGTH","val","VALIDATOR_MAXLENGTH","VALIDATOR_MIN","VALIDATOR_MAX","VALIDATOR_EMAIL","validate","value","validators","isValid","validator","trim","length","test"],"mappings":"AAAA,MAAMA,sBAAsB,GAAG,SAA/B;AACA,MAAMC,wBAAwB,GAAG,WAAjC;AACA,MAAMC,wBAAwB,GAAG,WAAjC;AACA,MAAMC,kBAAkB,GAAG,KAA3B;AACA,MAAMC,kBAAkB,GAAG,KAA3B;AACA,MAAMC,oBAAoB,GAAG,OAA7B;AACA,MAAMC,mBAAmB,GAAG,MAA5B;AAEA,OAAO,MAAMC,iBAAiB,GAAG,OAAO;AAAEC,EAAAA,IAAI,EAAER;AAAR,CAAP,CAA1B;AACP,OAAO,MAAMS,cAAc,GAAG,OAAO;AAAED,EAAAA,IAAI,EAAEF;AAAR,CAAP,CAAvB;AACP,OAAO,MAAMI,mBAAmB,GAAGC,GAAG,KAAK;AACzCH,EAAAA,IAAI,EAAEP,wBADmC;AAEzCU,EAAAA,GAAG,EAAEA;AAFoC,CAAL,CAA/B;AAIP,OAAO,MAAMC,mBAAmB,GAAGD,GAAG,KAAK;AACzCH,EAAAA,IAAI,EAAEN,wBADmC;AAEzCS,EAAAA,GAAG,EAAEA;AAFoC,CAAL,CAA/B;AAIP,OAAO,MAAME,aAAa,GAAGF,GAAG,KAAK;AAAEH,EAAAA,IAAI,EAAEL,kBAAR;AAA4BQ,EAAAA,GAAG,EAAEA;AAAjC,CAAL,CAAzB;AACP,OAAO,MAAMG,aAAa,GAAGH,GAAG,KAAK;AAAEH,EAAAA,IAAI,EAAEJ,kBAAR;AAA4BO,EAAAA,GAAG,EAAEA;AAAjC,CAAL,CAAzB;AACP,OAAO,MAAMI,eAAe,GAAG,OAAO;AAAEP,EAAAA,IAAI,EAAEH;AAAR,CAAP,CAAxB;AAEP,OAAO,MAAMW,QAAQ,GAAG,CAACC,KAAD,EAAQC,UAAR,KAAuB;AAC7C,MAAIC,OAAO,GAAG,IAAd;;AACA,OAAK,MAAMC,SAAX,IAAwBF,UAAxB,EAAoC;AAClC,QAAIE,SAAS,CAACZ,IAAV,KAAmBR,sBAAvB,EAA+C;AAC7CmB,MAAAA,OAAO,GAAGA,OAAO,IAAIF,KAAK,CAACI,IAAN,GAAaC,MAAb,GAAsB,CAA3C;AACD;;AACD,QAAIF,SAAS,CAACZ,IAAV,KAAmBP,wBAAvB,EAAiD;AAC/CkB,MAAAA,OAAO,GAAGA,OAAO,IAAIF,KAAK,CAACI,IAAN,GAAaC,MAAb,IAAuBF,SAAS,CAACT,GAAtD;AACD;;AACD,QAAIS,SAAS,CAACZ,IAAV,KAAmBN,wBAAvB,EAAiD;AAC/CiB,MAAAA,OAAO,GAAGA,OAAO,IAAIF,KAAK,CAACI,IAAN,GAAaC,MAAb,IAAuBF,SAAS,CAACT,GAAtD;AACD;;AACD,QAAIS,SAAS,CAACZ,IAAV,KAAmBL,kBAAvB,EAA2C;AACzCgB,MAAAA,OAAO,GAAGA,OAAO,IAAI,CAACF,KAAD,IAAUG,SAAS,CAACT,GAAzC;AACD;;AACD,QAAIS,SAAS,CAACZ,IAAV,KAAmBJ,kBAAvB,EAA2C;AACzCe,MAAAA,OAAO,GAAGA,OAAO,IAAI,CAACF,KAAD,IAAUG,SAAS,CAACT,GAAzC;AACD;;AACD,QAAIS,SAAS,CAACZ,IAAV,KAAmBH,oBAAvB,EAA6C;AAC3Cc,MAAAA,OAAO,GAAGA,OAAO,IAAI,iBAAiBI,IAAjB,CAAsBN,KAAtB,CAArB;AACD;AACF;;AACD,SAAOE,OAAP;AACD,CAvBM","sourcesContent":["const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n"]},"metadata":{},"sourceType":"module"}