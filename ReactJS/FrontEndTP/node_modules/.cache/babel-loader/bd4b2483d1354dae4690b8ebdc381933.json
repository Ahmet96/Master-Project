{"ast":null,"code":"var _jsxFileName = \"/home/ahmet/Desktop/TPProject/ReactJS/FrontEndTP/src/products/pages/AllProducts.js\";\nimport React, { useEffect, useState } from \"react\"; // import UsersList from \"../components/UsersList\";\n\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nconst AllProducts = () => {\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedUsers, setLoadedUsers] = useState();\n  const productId = useParams().productId;\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const responseData = await sendRequest(`http://localhost:5000/api/products/${productId}`);\n        setLoadedUsers(responseData.users);\n      } catch (err) {}\n    };\n\n    fetchUsers();\n  }, [sendRequest]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default AllProducts;","map":{"version":3,"sources":["/home/ahmet/Desktop/TPProject/ReactJS/FrontEndTP/src/products/pages/AllProducts.js"],"names":["React","useEffect","useState","ErrorModal","LoadingSpinner","useHttpClient","AllProducts","isLoading","error","sendRequest","clearError","loadedUsers","setLoadedUsers","productId","useParams","fetchUsers","responseData","users","err"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,+CAAvB;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,SAASC,aAAT,QAA8B,8BAA9B;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA,WAApB;AAAiCC,IAAAA;AAAjC,MAAgDL,aAAa,EAAnE;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,EAA9C;AACA,QAAMW,SAAS,GAAGC,SAAS,GAAGD,SAA9B;AAGAZ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,UAAU,GAAG,YAAY;AAC7B,UAAI;AACF,cAAMC,YAAY,GAAG,MAAMP,WAAW,CACnC,sCAAqCI,SAAU,EADZ,CAAtC;AAIAD,QAAAA,cAAc,CAACI,YAAY,CAACC,KAAd,CAAd;AACD,OAND,CAME,OAAOC,GAAP,EAAY,CAAE;AACjB,KARD;;AASAH,IAAAA,UAAU;AACX,GAXQ,EAWN,CAACN,WAAD,CAXM,CAAT;AAaA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAED,KAAnB;AAA0B,IAAA,OAAO,EAAEE,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGH,SAAS,iBACR;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAHJ,CADF;AAWD,CA9BD;;AAgCA,eAAeD,WAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\n// import UsersList from \"../components/UsersList\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\n\r\nconst AllProducts = () => {\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [loadedUsers, setLoadedUsers] = useState();\r\n  const productId = useParams().productId;\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchUsers = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `http://localhost:5000/api/products/${productId}`\r\n        );\r\n\r\n        setLoadedUsers(responseData.users);\r\n      } catch (err) {}\r\n    };\r\n    fetchUsers();\r\n  }, [sendRequest]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {isLoading && (\r\n        <div className=\"center\">\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n      {/* {!isLoading && loadedUsers && <UsersList items={loadedUsers} />} */}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AllProducts;\r\n"]},"metadata":{},"sourceType":"module"}