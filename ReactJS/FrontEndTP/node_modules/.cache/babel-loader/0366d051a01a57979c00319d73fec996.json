{"ast":null,"code":"var _jsxFileName = \"/home/ahmet/Desktop/TPProject/ReactJS/FrontEndTP/src/products/pages/UpdateProduct.js\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH, VALIDATOR_MAXLENGTH } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport \"./ProductForm.css\";\n\nconst UpdatePlace = () => {\n  const auth = useContext(AuthContext);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedProduct, setLoadedProduct] = useState();\n  const productId = useParams().productId;\n  const history = useHistory();\n  const [formState, inputHandler, setFormData] = useForm({\n    title: {\n      value: \"\",\n      isValid: false\n    },\n    description: {\n      value: \"\",\n      isValid: false\n    },\n    price: {\n      value: \"\",\n      isValid: false\n    },\n    category: {\n      value: \"\",\n      isValid: false\n    },\n    currency: {\n      value: \"\",\n      isValid: false\n    }\n  }, false);\n  useEffect(() => {\n    const fetchProduct = async () => {\n      try {\n        const responseData = await sendRequest(`http://localhost:5000/api/products/${productId}`);\n        setLoadedProduct(responseData.product);\n        setFormData({\n          title: {\n            value: responseData.product.title,\n            isValid: true\n          },\n          description: {\n            value: responseData.product.description,\n            isValid: true\n          },\n          price: {\n            value: responseData.product.price,\n            isValid: true\n          },\n          category: {\n            value: responseData.product.category,\n            isValid: true\n          },\n          currency: {\n            value: responseData.product.currency,\n            isValid: true\n          }\n        }, true);\n      } catch (err) {}\n    };\n\n    fetchProduct();\n  }, [sendRequest, productId, setFormData]);\n\n  const placeUpdateSubmitHandler = async event => {\n    event.preventDefault();\n\n    try {\n      await sendRequest(`http://localhost:5000/api/products/${productId}`, \"PATCH\", JSON.stringify({\n        title: formState.inputs.title.value,\n        description: formState.inputs.description.value,\n        price: formState.inputs.price.value,\n        category: formState.inputs.category.value,\n        currency: formState.inputs.currency.value\n      }), {\n        \"Content-Type\": \"application/json\"\n      });\n      history.push(\"/\" + auth.userId + \"/products\");\n    } catch (err) {}\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  if (!loadedProduct && !error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    }, \"Could not find product!\")));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }), !isLoading && loadedProduct && /*#__PURE__*/React.createElement(\"form\", {\n    className: \"product-form\",\n    onSubmit: placeUpdateSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Title\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid title.\",\n    onInput: inputHandler,\n    initialValue: loadedProduct.title,\n    initialValid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"description\",\n    element: \"textarea\",\n    label: \"Description\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please enter a valid description (min. 5 characters).\",\n    onInput: inputHandler,\n    initialValue: loadedProduct.description,\n    initialValid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"price\",\n    element: \"input\",\n    label: \"Price\",\n    validators: [VALIDATOR_REQUIRE(\"123456789\")],\n    errorText: \"Please enter a valid price.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"category\",\n    element: \"input\",\n    label: \"Category\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please enter a valid Category name.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"currency\",\n    element: \"input\",\n    label: \"Currency\",\n    validators: [VALIDATOR_MAXLENGTH(3)],\n    errorText: \"Please enter a valid Currency Type, not longer than 3 words!\",\n    Placeholder: \"Eg:USD,TL\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }\n  }, \"UPDATE PRODUCT\")));\n};\n\nexport default UpdatePlace;","map":{"version":3,"sources":["/home/ahmet/Desktop/TPProject/ReactJS/FrontEndTP/src/products/pages/UpdateProduct.js"],"names":["React","useEffect","useState","useContext","useParams","useHistory","Input","Button","Card","LoadingSpinner","ErrorModal","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_MAXLENGTH","useForm","useHttpClient","AuthContext","UpdatePlace","auth","isLoading","error","sendRequest","clearError","loadedProduct","setLoadedProduct","productId","history","formState","inputHandler","setFormData","title","value","isValid","description","price","category","currency","fetchProduct","responseData","product","err","placeUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","push","userId"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_MAXLENGTH,\n} from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport \"./ProductForm.css\";\n\nconst UpdatePlace = () => {\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedProduct, setLoadedProduct] = useState();\n  const productId = useParams().productId;\n  const history = useHistory();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      title: {\n        value: \"\",\n        isValid: false,\n      },\n      description: {\n        value: \"\",\n        isValid: false,\n      },\n      price: {\n        value: \"\",\n        isValid: false,\n      },\n      category: {\n        value: \"\",\n        isValid: false,\n      },\n      currency: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  useEffect(() => {\n    const fetchProduct = async () => {\n      try {\n        const responseData = await sendRequest(\n          `http://localhost:5000/api/products/${productId}`\n        );\n        setLoadedProduct(responseData.product);\n        setFormData(\n          {\n            title: {\n              value: responseData.product.title,\n              isValid: true,\n            },\n            description: {\n              value: responseData.product.description,\n              isValid: true,\n            },\n            price: {\n              value: responseData.product.price,\n              isValid: true,\n            },\n            category: {\n              value: responseData.product.category,\n              isValid: true,\n            },\n            currency: {\n              value: responseData.product.currency,\n              isValid: true,\n            },\n          },\n          true\n        );\n      } catch (err) {}\n    };\n    fetchProduct();\n  }, [sendRequest, productId, setFormData]);\n\n  const placeUpdateSubmitHandler = async (event) => {\n    event.preventDefault();\n    try {\n      await sendRequest(\n        `http://localhost:5000/api/products/${productId}`,\n        \"PATCH\",\n        JSON.stringify({\n          title: formState.inputs.title.value,\n          description: formState.inputs.description.value,\n          price: formState.inputs.price.value,\n          category: formState.inputs.category.value,\n          currency: formState.inputs.currency.value,\n        }),\n        {\n          \"Content-Type\": \"application/json\",\n        }\n      );\n      history.push(\"/\" + auth.userId + \"/products\");\n    } catch (err) {}\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"center\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (!loadedProduct && !error) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2>Could not find product!</h2>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {!isLoading && loadedProduct && (\n        <form className=\"product-form\" onSubmit={placeUpdateSubmitHandler}>\n          <Input\n            id=\"title\"\n            element=\"input\"\n            type=\"text\"\n            label=\"Title\"\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText=\"Please enter a valid title.\"\n            onInput={inputHandler}\n            initialValue={loadedProduct.title}\n            initialValid={true}\n          />\n          <Input\n            id=\"description\"\n            element=\"textarea\"\n            label=\"Description\"\n            validators={[VALIDATOR_MINLENGTH(5)]}\n            errorText=\"Please enter a valid description (min. 5 characters).\"\n            onInput={inputHandler}\n            initialValue={loadedProduct.description}\n            initialValid={true}\n          />\n          <Input\n            id=\"price\"\n            element=\"input\"\n            label=\"Price\"\n            validators={[VALIDATOR_REQUIRE(\"123456789\")]}\n            errorText=\"Please enter a valid price.\"\n            onInput={inputHandler}\n          />\n          <Input\n            id=\"category\"\n            element=\"input\"\n            label=\"Category\"\n            validators={[VALIDATOR_MINLENGTH(5)]}\n            errorText=\"Please enter a valid Category name.\"\n            onInput={inputHandler}\n          />\n          <Input\n            id=\"currency\"\n            element=\"input\"\n            label=\"Currency\"\n            validators={[VALIDATOR_MAXLENGTH(3)]}\n            errorText=\"Please enter a valid Currency Type, not longer than 3 words!\"\n            Placeholder=\"Eg:USD,TL\"\n            onInput={inputHandler}\n          />\n\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            UPDATE PRODUCT\n          </Button>\n        </form>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default UpdatePlace;\n"]},"metadata":{},"sourceType":"module"}